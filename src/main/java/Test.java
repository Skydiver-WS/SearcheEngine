import lombok.SneakyThrows;
import org.apache.lucene.morphology.LuceneMorphology;
import org.apache.lucene.morphology.russian.RussianLuceneMorphology;
import searchengine.services.lemma.LemmaAnalyze;

import java.util.List;

public class Test {
    @SneakyThrows
    public static void main(String[] args) {
        LemmaAnalyze lemmaAnalyze = new LemmaAnalyze();
        String text = "Данный код выа цущао чсэдм цъхзшла ыва выаыв (две возможные исходные\n" +
                "формы слова «леса»):\n" +
                "лес\n" +
                "леса\n" +
                "● Создайте класс с методом, который будет принимать в качестве\n" +
                "параметра текст и возвращать перечень лемм для каждого слова в этом\n" +
                "тексте (за исключением междометий, союзов, предлогов и частиц — см.\n" +
                "ниже) и количество упоминаний каждой такой леммы в переданном\n" +
                "тексте. Ниже описаны детали реализации данного метода.\n" +
                "Пример текста на входе:\n" +
                "Повторное появление леопарда в Осетии позволяет предположить,\n" +
                "что леопард постоянно обитает в некоторых районах Северного\n" +
                "Кавказа. ОБРАТИТЕ ВНИМАНИЕ! Разделение текстов на слова вы уже\n" +
                "реализовывали в одном из заданий к модулю «Строки» курса\n" +
                "21«Java-разработчик c нуля». Рекомендуем использовать в этом проекте\n" +
                "уже написанный вами ранее код.\n" +
                "● Метод должен возвращать HashMap<String, Integer>, в котором ключами\n" +
                "будут леммы, а значениями — их количества в переданном тексте.\n" +
                "● Передаваемые в метод тексты необходимо очищать от служебных частей\n" +
                "речи. Часть речи можно определить так: Такой код выдаст следующую информацию:\n" +
                "или|n СОЮЗ\n" +
                "В данном случае «СОЮЗ» означает, что слово является союзом. Другие\n" +
                "примеры:\n" +
                "и|o МЕЖД\n" +
                "копал|A С мр,ед,им\n" +
                "копать|a Г дст,прш,мр,ед\n" +
                "хитро|j Н\n" +
                "хитрый|Y КР_ПРИЛ ср,ед,од,но\n" +
                "синий|Y П мр,ед,вн,но\n" +
                "● Если с реализацией кода возникают сложности, посмотрите наш пример\n" +
                "такого кода.\n" +
                "● Также можете посмотреть пример реализации приложения с\n" +
                "использованием данных классов и библиотек в проекте, который мы вам\n" +
                "рекомендовали ранее. Можете загрузить его к себе на компьютер и\n" +
                "собрать в соответствии с инструкциями, приведёнными в файле\n" +
                "README.md (файл лежит в корне проекта).\n" +
                "● В этом же классе реализуйте метод, который будет очищать код\n" +
                "веб-страниц от HTML-тегов.\n" +
                "● Реализуйте функцию индексации отдельной веб-страницы. Для этого\n" +
                "сначала реализуйте метод контроллера для команды API indexPage в\n" +
                "соответствии с технической спецификацией. <settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n" +
                "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n" +
                "xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0\n" +
                "https://maven.apache.org/xsd/settings-1.0.0.xsd\">\n" +
                "<servers>\n" +
                "<server>\n" +
                "<id>skillbox-gitlab</id>\n" +
                "<configuration>\n" +
                "<httpHeaders>\n" +
                "<property>\n" +
                "<name>Private-Token</name>";
        System.out.println(lemmaAnalyze.lemma(text).keySet());
    }
}
